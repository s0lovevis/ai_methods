import logging
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_TOKEN = "7604679620:AAFb9Gs3wCca1PEcLMF4j8ENfNaqbfhgddQ"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
model_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="GPT2 fine-tuned"), KeyboardButton(text="T-Lite instruct")],
        [KeyboardButton(text="–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –º–æ–¥–µ–ª–∏")]
    ],
    resize_keyboard=True
)

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ")]],
    resize_keyboard=True
)

post_recipe_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–•–æ—á—É –µ—â–µ —Ä–µ—Ü–µ–ø—Ç!"), KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    user_data[message.chat.id] = {"step": "choose_model"}
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–∏–¥—É–º–∞—Ç—å –±–ª—é–¥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π."
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—É—é –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç:",
        reply_markup=model_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@router.message(lambda msg: user_data.get(msg.chat.id, {}).get("step") == "choose_model")
async def choose_model(message: types.Message):
    if message.text == "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –º–æ–¥–µ–ª–∏":
        user_data[message.chat.id]["step"] = "model_info"
        await message.answer(
            "GPT2 fine-tuned - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n"
            "T-Lite instruct - –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=back_keyboard
        )
    elif message.text in ["GPT2 fine-tuned", "T-Lite instruct"]:
        if message.text == "T-Lite instruct":
            await message.answer(
                "–î–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é.",
                reply_markup=model_keyboard
            )
        else:
            user_data[message.chat.id]["model"] = message.text
            user_data[message.chat.id]["step"] = "input_ingredients"
            await message.answer(
                "–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                reply_markup=ReplyKeyboardRemove()
            )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=model_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö
@router.message(lambda msg: user_data.get(msg.chat.id, {}).get("step") == "model_info")
async def model_info(message: types.Message):
    if message.text == "–ü–æ–Ω—è—Ç–Ω–æ":
        user_data[message.chat.id]["step"] = "choose_model"
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—É—é –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç:",
            reply_markup=model_keyboard
        )
    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ '–ü–æ–Ω—è—Ç–Ω–æ', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
@router.message(lambda msg: user_data.get(msg.chat.id, {}).get("step") == "input_ingredients")
async def input_ingredients(message: types.Message):
    user_data[message.chat.id]["ingredients"] = message.text
    user_data[message.chat.id]["step"] = "generate_recipe"
    await message.answer("ü§ñ –ú–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 15-20 —Å–µ–∫—É–Ω–¥.")

    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    await asyncio.sleep(5)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏
    recipe = "–í–∞—à —Ä–µ—Ü–µ–ø—Ç: —Å–º–µ—à–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –ø–æ–¥–∞–≤–∞–π—Ç–µ!"  # –ó–∞–≥–ª—É—à–∫–∞

    await message.answer(recipe)
    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=post_recipe_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ —Ä–µ—Ü–µ–ø—Ç–∞
@router.message(lambda msg: user_data.get(msg.chat.id, {}).get("step") == "generate_recipe")
async def post_recipe_action(message: types.Message):
    if message.text == "–•–æ—á—É –µ—â–µ —Ä–µ—Ü–µ–ø—Ç!":
        user_data[message.chat.id]["step"] = "choose_model"
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—É—é –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç:",
            reply_markup=model_keyboard
        )
    elif message.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É":
        await message.answer(
            "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.",
            reply_markup=ReplyKeyboardRemove()
        )
        user_data.pop(message.chat.id, None)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=post_recipe_keyboard
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
