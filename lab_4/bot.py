import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import asyncio
from models.flan_t5.flan_t5_model import FlanT5LargeRecipeGenerator  # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤
from translator import Translator  # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_TOKEN = ""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
generator = FlanT5LargeRecipeGenerator()
translator = Translator(source_lang="ru", target_lang="en")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª—é–¥–∞
type_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–µ—Å–µ—Ä—Ç"), KeyboardButton(text="–ó–∞–∫—É—Å–∫–∞"), KeyboardButton(text="–ì–æ—Ä—è—á–µ–µ")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    user_data[message.chat.id] = {"step": "meal_type"}  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–∏–¥—É–º–∞—Ç—å –±–ª—é–¥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π."
    )
    await message.answer(
        "–ö–∞–∫–æ–π —Ç–∏–ø –±–ª—é–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?",
        reply_markup=type_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª—é–¥–∞
@router.message(lambda msg: user_data.get(msg.chat.id, {}).get("step") == "meal_type")
async def handle_meal_type(message: types.Message):
    user_data[message.chat.id]["type"] = message.text
    user_data[message.chat.id]["step"] = "cuisine"  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫—É—Ö–Ω—é –º–∏—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è, –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è, –ê–∑–∏–∞—Ç—Å–∫–∞—è):",
        reply_markup=ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ö–Ω–∏
@router.message(lambda msg: user_data.get(msg.chat.id, {}).get("step") == "cuisine")
async def handle_cuisine(message: types.Message):
    user_data[message.chat.id]["cuisine"] = message.text
    user_data[message.chat.id]["step"] = "ingredients"  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await message.answer("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
@router.message(lambda msg: user_data.get(msg.chat.id, {}).get("step") == "ingredients")
async def handle_ingredients(message: types.Message):
    user_data[message.chat.id]["ingredients"] = message.text
    user_data[message.chat.id]["step"] = "processing"  # –ü–æ–º–µ—á–∞–µ–º —à–∞–≥ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∫—É

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await message.answer("ü§ñ –ú–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

    try:
        # –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        ingredients_en = translator.translate_to_en(user_data[message.chat.id]["ingredients"])
        type_en = translator.translate_to_en(user_data[message.chat.id]["type"])
        cuisine_en = translator.translate_to_en(user_data[message.chat.id]["cuisine"])

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
        prompt = f"Write a recipe for a {type_en} in {cuisine_en} style using the following ingredients: {ingredients_en}."

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
        recipe_en = generator.generate(prompt)

        # –ü–µ—Ä–µ–≤–æ–¥ —Ä–µ—Ü–µ–ø—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        recipe_ru = translator.translate_to_ru(recipe_en)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"‚ú® –í–æ—Ç –≤–∞—à —Ä–µ—Ü–µ–ø—Ç:\n\n{recipe_ru}")
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.pop(message.chat.id, None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
@router.message()
async def fallback_handler(message: types.Message):
    await start_command(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
